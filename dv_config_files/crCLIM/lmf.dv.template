-- -----------------------------------------------------------------------------
-- DV configuration script: for COSMO simulator instances
-- -----------------------------------------------------------------------------
-- note: many of the config variables/constants can be overwritten
-- by command line arguments when running dv.
-- see list when calling dv --help
-- -----------------------------------------------------------------------------
-- note: it's a Lua script that conforms to a given public API
-- and can use some additional built-in DV specific callback
-- functions: see prefix cb_.
-- for Lua: see https://www.lua.org/manual/5.3/ for syntax and
-- available functions
-- noteworthy:
--    Lua uses ~= and not != for inequality test
--    // is integer division
--    string index positions are 1 based and not 0 based
-- v1.5 2017-05-12 / 2017-09-23 Pirmin Schmid
-- -----------------------------------------------------------------------------


-- -----------------------------------------------------------------------------
-- PUBLIC INTERFACE with DV (no change of names / signatures here)
-- variables may be initialized during init()
-- they will not be accessed by DV before
-- however, they should not be changed afterwards (they are cached in the DV code)
-- do not modify the names or signatures of the variables/functions
-- of this public API
-- -----------------------------------------------------------------------------

-- integer >= 0
api_version = 5


-- dv server -------------------------------------------------------------------

-- string: name or IP address
dv_hostname = "0.0.0.0"

-- strings
dv_client_port = "8888"
dv_sim_port = "8889"
dv_batch_job_id = "0_0"
dv_statistics_label = "na"

-- ints
dv_max_parallel_simjobs = 1
dv_max_horizontal_prefetching_intervals = 1
dv_max_vertical_prefetching_intervals = 1

-- optional
-- 1 for true; 0 for false
-- note: true implies that optional_sim_max_nr *must* be set correctly
optional_dv_prefetch_all_files_at_once = 0


-- simulator -------------------------------------------------------------------

cosmo_sim_start="?STARTDATE"

-- strings
sim_config_path = "?CONFIG_PATH"
sim_checkpoint_path = "?RESTART_PATH"
sim_result_path = "?RESULT_PATH"
sim_temporary_redirect_path = "?TMP_PATH"

-- strings, keep = "" if not used
-- note re output files:
-- UID, APPID, JOBID can be used in the filename;
-- they will be replaced by actual values during job generation.
-- template_style:
--    0 for not used
--    1 for {{key}} style
--    2 for $key and $(key) style; note $$ must be used for $ in output file
sim_parameter_template_style = 0
sim_parameter_template_file = ""
sim_parameter_output_file = ""

sim_job_template_style = 2
sim_job_template_file = "?JOB_TEMPLATE"
sim_job_output_file = "simjob_UID_APPID_JOBID.job"

-- int
sim_kill_threshold = 0

-- int; only needed for optional_dv_prefetch_all_files_at_once == 1
-- i.e. create all files; is calculated during init, if needed
optional_sim_max_nr = 0

-- file cache ------------------------------------------------------------------

-- string: unlimited LRU ARC LIRS BCL DCL PLRU PBCL PDCL
filecache_type = "unlimited"

-- int > 0
filecache_size = 1000

-- int >= 0 and < file_cache_size
filecache_fifo_queue_size = 0

-- int > 0 and < (filecache_size - filecache_fifo_queue_size); only needed for LIRS
filecache_lir_set_size = 800

-- int in range [1, (filecache_size - filecache_fifo_queue_size)]
filecache_protected_mrus = 1

-- double in range [0.0, 1.0]
filecache_penalty_factor = 0.0


-- functions -------------------------------------------------------------------

-- return 1 (true) in case of success; or 0 (false) in case of error
function init(dv_api_version)
	-- check env variables
	e = os.getenv("DV_PROXY_SRV_IP")
	if e ~= nil then
		dv_hostname = e
	end

	e = os.getenv("DV_SIM_PORT")
	if e ~= nil then
		dv_sim_port = e
	end

	e = os.getenv("DV_CLIENT_PORT")
	if e ~= nil then
		dv_client_port = e
	end

	e = os.getenv("SLURMID")
	if e ~= nil then
		dv_batch_job_id = e
	end

	e = os.getenv("LSB_NAME")
	if e ~= nil then
		dv_statistics_label = e
	end	

	e = os.getenv("PREFETCH")
	if e ~= nil then
		dv_prefetch_opt = e
	end

	-- cache settings: ENV at the moment
	-- overwriting with command line arguments follows
	e = os.getenv("DV_FILECACHE_TYPE")
	if e ~= nil then
		filecache_type = e
	end

	e = os.getenv("DV_FILECACHE_SIZE")
	if e ~= nil then
		filecache_size = checkint(e, 1, math.maxinteger, -1, "ENV variable DV_FILECACHE_SIZE must be an integer > 0")
		if filecache_size == -1 then
			return 0
		end
	end

	e = os.getenv("DV_FILECACHE_PROTECTED_MRUS")
	if e ~= nil then
		filecache_protected_mrus = checkint(e, 1, filecache_size, -1, "ENV variable DV_FILECACHE_PROTECTED_MRUS must be an integer in [1, cache_size]")
		if filecache_protected_mrus == -1 then
			return 0
		end
	end

	e = os.getenv("DV_FILECACHE_PENALTY_FACTOR")
	if e ~= nil then
		filecache_penalty_factor = checknumber(e, 0.0, 1.0, -1.0, "ENV variable DV_FILECACHE_PENALTY_FACTOR must be a number in [0.0, 1.0]")
		if filecache_penalty_factor < 0.0 then
			return 0
		end
	end

	-- setting this option: implies that optional_sim_max_nr must be set during private init.
	e = os.getenv("DV_PREFETCH_ALL_FILES_AT_ONCE")
	if e ~= nil then
		n = checkint(e, 0, 1, -1, "optional ENV variable DV_PREFETCH_ALL_FILES_AT_ONCE must bei either 0 or 1; assumed == 0 if lacking")
		if n == -1 then
			return 0
		else
			optional_dv_prefetch_all_files_at_once = n
		end
	end

	-- handle private initialization
	p = private_init()
	if p == 0 then
		return 0
	end

	-- handle optional flags (may depend on private init)
	if optional_dv_prefetch_all_files_at_once == 1 then
		if optional_sim_max_nr == 0 then
			print("Error: optional_sim_max_nr must have been set during config if optional_dv_prefetch_all_files_at_once is active")
			return 0
		end
	end
 
	-- default OK, if we get here
	return 1
end


-- is called by check_dv_config_file after init()
-- this function is *not* called by the DV server
-- any checks that should be performed to assure correct
-- and stable functionality of this configuration script
-- it can also be used to familiarize yourself with the config
-- syntax with a very short write-test-reply time. 
-- output and input can be used (this will not be run by the server)
-- return 1 (true) in case of success; or 0 (false) in case of error
function run_checks(dv_api_version)
	print("Hello")
	print("API version " .. dv_api_version)
	print("dv_hostname: " .. dv_hostname)
	print("cosmo start nr " .. cosmo_absolute_simstart)

	print()
	f = "test/testing/lrfd2006100106o"
	t = get_checkpoint_file_type(f)
	nr = checkpoint2nr(f, t)
	print("test " .. f .. " -> " .. nr)

	print()
	f = "output/5min/lfff00003000.nc"
	t = get_checkpoint_file_type(f)
	nr = checkpoint2nr(f, t)
	print("test " .. f .. " -> " .. nr)

	print()
	print("test final adjustment: job is from hour 1 to hour 2: ")
	simstart = 12 * 300
	simstop = 24 * 300
	print("DV simstart " .. simstart)
	print("DV simstop " .. simstop)
	print("adjustment for simulator job: " .. simjob_final_adjustments("", simstart, simstop))

	print()
	return 1
end


-- returns checkpoint file type nr (or 0 for not a result file)
-- it replaces former is_checkpoint_file() check
function get_checkpoint_file_type(filename)
	return cosmo_filetype(filename)
end


-- assumes proper filename (see check above)
-- return value must be an integer >= 0
function checkpoint2nr(filename, checkpoint_file_type)
	return cosmo_filename2nr(filename, checkpoint_file_type)
end


-- returns result file type nr (or 0 for not a result file)
-- it replaces former is_result_file() check
function get_result_file_type(filename)
	return cosmo_filetype(filename)
end


-- return value must be an integer >= 0
function result2nr(filename, result_file_type)
	return cosmo_filename2nr(filename, result_file_type)
end


-- this function is called after simjob generation but before
-- actually substituting the variables in the template files
-- final adjustments can be made for the specific simulator
-- simstart and simstop are provided as integer values
-- (may need modifications most frequently)
-- additionally, map_string contains the entire substitution hashmap
-- in a "key1=value1;key2=value2; ..." format
-- note: input simstart == number corresponding to restart/checkpoint
--       input simstop == (number for next restart/checkpoint) - 1
--                  or == target_nr if there is no ceiling checkpoint
-- the function returns a string in a similar map_string format
-- however, only updates must be returned, not the entire map_string
-- typically, it will just look like "simstart=nr;simstop=nr"
-- better use string.format to assure int type output
-- note: simstart and simstart return values will only adjust
-- the key value store for template writing but not the internal
-- values used for SimJob.willProduce() checks.
function simjob_final_adjustments(map_string, simstart, simstop)
	simstart = simstart * cosmo_seconds_per_id_increment // cosmo_seconds_per_final_simstart_simstop_increment
	simstop = (simstop + cosmo_seconds_per_final_simstart_simstop_increment) * cosmo_seconds_per_id_increment // cosmo_seconds_per_final_simstart_simstop_increment
	if simstart == simstop then
		simstop = simstop + 1
	end
	return string.format("simstart=%d;simstop=%d", simstart, simstop)
end


-- -----------------------------------------------------------------------------
-- PRIVATE IMPLEMENTATION HELPERS
-- add additional variables / functions here as needed
-- -----------------------------------------------------------------------------

-- return 1 (true) in case of success; or 0 (false) in case of error
function private_init()
	-- for compatibility, also check for optional use of former flag to prefetch all
	e = os.getenv("PREFETCH_OPT")
	if e ~= nil then
		n = tonumber(e)
		if n == nil then
			print("ENV variable PREFETCH_OPT must be a number")
			return 0
		end

		if n < 0.0 then
			optional_dv_prefetch_all_files_at_once = 1
		end
	end

	-- this ENV variable is a must
	cosmo_absolute_simstart_str = cosmo_sim_start
	cosmo_absolute_simstart = cb_datestr2seconds(cosmo_absolute_simstart_str, "%Y%m%d%H") // cosmo_seconds_per_id_increment


	-- this ENV variable is only needed for DV_PREFETCH_ALL_FILES_AT_ONCE
	if optional_dv_prefetch_all_files_at_once == 1 then	
		e = os.getenv("COSMO_SIMEND")
		if e == nil then
			print("ENV variable COSMO_SIMEND must be set with mode DV_PREFETCH_ALL_FILES_AT_ONCE")
			return 0
		end
		cosmo_absolute_simend_str = e
		cosmo_absolute_simend = cb_datestr2seconds(cosmo_absolute_simend_str, "%Y%m%d%H") // cosmo_seconds_per_id_increment

		-- that's the actual value that is needed in this case
		sim_max_nr = cosmo_absolute_simend - cosmo_absolute_simstart
	end


	-- these ENV variables are optional
	-- command line arguments may be used
	e = os.getenv("COSMO_CONFIG_PATH")
	if e ~= nil then
		sim_checkpoint_path = e
	end

	e = os.getenv("COSMO_CHECKPOINT_PATH")
	if e ~= nil then
		sim_checkpoint_path = e
	end
	
	e = os.getenv("COSMO_RESULT_PATH")
	if e ~= nil then
		sim_result_path = e
	end

	-- optional (default is given)
	e = os.getenv("COSMO_TEMPLATE_FILE")
	if e ~= nil then
		sim_job_template_file = e
	end

	return 1
end


-- converts seconds to id numbers
-- e.g. 5 min == 300 seconds
-- currently set to 1 second
cosmo_seconds_per_id_increment = 1

-- all id values are relative to a given simstart timestamp
-- in YYYYMMDDHH format, which can be overwritten by ENV variable COSMO_SIMSTART
-- actual integer value cosmo_absolute_simstart is calculated during private_init()
cosmo_absolute_simstart_str = "20061001000000"
cosmo_absolute_simstart = 0


-- simstop is only needed for sim_max_nr,
-- which is only needed for dv_prefetch_opt == -1.0
-- which is a flag for generating all files at once
-- see benchmarking
cosmo_absolute_simend_str = "2006100106"
cosmo_absolute_simend = 0

-- this is used in simjob_final_adjustments()
-- currently 1 hour
cosmo_seconds_per_final_simstart_simstop_increment = 3600


-- returns 1 for "D" type and 2 for "F" type; and 0 if not known
function cosmo_filetype(filename)
	name = basename(filename)
	t = string.sub(name, 4, 4)
	if t == "d" then
		if string.len(name) >= 14 then
			return 1
		else
			return 0
		end
	elseif t == "f" then
		if string.len(name) >= 12 then
			return 2
		else
			return 0
		end
	else
		return 0
	end
end


-- returns an integer that is used as DV id
-- file_type must be a valid file_type number: 1 or 2
--
-- type 1:
-- absolute time
-- lrfdYYYYMMDDHHMMSSsuffix
-- lffdYYYYMMDDHHMMSSsuffix
-- length is checked to be >= 14
--
-- type 2:
-- relative time to some provided simulation start
-- lrffDDHHMMSSsuffix
-- lfffDDHHMMSSsuffix
-- needs manual conversion
-- length is checked to be >= 12
function cosmo_filename2nr(filename, file_type)
	name = basename(filename)
	if file_type == 1 then
		date_str = string.sub(name, 5, 18)
		nr = cb_datestr2seconds(date_str, "%Y%m%d%H%M%S") // cosmo_seconds_per_id_increment
		return nr - cosmo_absolute_simstart
	elseif file_type == 2 then
		date_str = string.sub(name, 5, 12)
		days = tonumber(string.sub(date_str, 1, 2))
		hours = tonumber(string.sub(date_str, 3, 4))
		minutes = tonumber(string.sub(date_str, 5, 6))
		seconds = tonumber(string.sub(date_str, 7, 8))
		nr = days * 24 + hours
		nr = nr * 60 + minutes
		nr = nr * 60 + seconds
		return nr // cosmo_seconds_per_id_increment
	else
		print(string.format("unknown file_type %d", file_type))
		return 0
	end
end

-- helper function to remove path
function basename(filename)
	i = string.len(filename)
	if i == 0 then
		return ""
	end

	while i > 0 do
		if string.sub(filename, i, i) == "/" then
			break
		end
		i = i - 1
	end
	return string.sub(filename, i + 1)
end


-- helper functions for input validation
function checkint(str, min, max, error_value, error_message)
	n = math.tointeger(str)
	if n ~= nil then
		if min <= n and n <= max then
			return n
		end
	end
	
	print(error_message)
	return error_value
end

function checknumber(str, min, max, error_value, error_message)
	n = tonumber(str)
	if n ~= nil then
		if min <= n and n <= max then
			return n
		end
	end

	print(error_message)
	return error_value
end

-- -----------------------------------------------------------------------------
-- end
-- -----------------------------------------------------------------------------
